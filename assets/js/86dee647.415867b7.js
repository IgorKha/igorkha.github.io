"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1252],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(a),d=i,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||r;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<r;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2465:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var n=a(7462),i=(a(7294),a(3905));const r={slug:"arch-linux-with-u2f",title:"Arch Linux with U2F",authors:"IgorKha",tags:["security","key","yubico","solokeys","U2F","FIDO2","arch","linux","pam","sddm","ssh"]},o=void 0,s={permalink:"/blog/arch-linux-with-u2f",editUrl:"https://github.com/IgorKha/igorkha.github.io/tree/main/blog/2022-11-26-Arch-Linux-with-Yubico-U2F/index.md",source:"@site/blog/2022-11-26-Arch-Linux-with-Yubico-U2F/index.md",title:"Arch Linux with U2F",description:"Linux-u2f.png",date:"2022-11-26T00:00:00.000Z",formattedDate:"November 26, 2022",tags:[{label:"security",permalink:"/blog/tags/security"},{label:"key",permalink:"/blog/tags/key"},{label:"yubico",permalink:"/blog/tags/yubico"},{label:"solokeys",permalink:"/blog/tags/solokeys"},{label:"U2F",permalink:"/blog/tags/u-2-f"},{label:"FIDO2",permalink:"/blog/tags/fido-2"},{label:"arch",permalink:"/blog/tags/arch"},{label:"linux",permalink:"/blog/tags/linux"},{label:"pam",permalink:"/blog/tags/pam"},{label:"sddm",permalink:"/blog/tags/sddm"},{label:"ssh",permalink:"/blog/tags/ssh"}],readingTime:7.47,hasTruncateMarker:!0,authors:[{name:"IgorKha",url:"https://github.com/IgorKha",imageURL:"https://github.com/IgorKha.png",key:"IgorKha"}],frontMatter:{slug:"arch-linux-with-u2f",title:"Arch Linux with U2F",authors:"IgorKha",tags:["security","key","yubico","solokeys","U2F","FIDO2","arch","linux","pam","sddm","ssh"]},nextItem:{title:"Bandwidth ZeroTier on NXP LS1046",permalink:"/blog/Bandwidth-ZeroTier-on-NXP-LS1046"}},l={authorsImageUrls:[void 0]},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation the pam-u2f",id:"installation-the-pam-u2f",level:2},{value:"Arch Linux",id:"arch-linux",level:3},{value:"Debian/Ubuntu",id:"debianubuntu",level:3},{value:"Source code",id:"source-code",level:3},{value:"Configure Security keys",id:"configure-security-keys",level:2},{value:"Individual Authorization Mapping by User",id:"individual-authorization-mapping-by-user",level:3},{value:"Central Authorization Mapping",id:"central-authorization-mapping",level:3},{value:"Activate the pam_u2f.so module in PAM",id:"activate-the-pam_u2fso-module-in-pam",level:2},{value:"Dealing with SDDM",id:"dealing-with-sddm",level:3},{value:"Passwordless sudo with U2F",id:"passwordless-sudo-with-u2f",level:3},{value:"SSH Credentials",id:"ssh-credentials",level:2},{value:"Additional information",id:"additional-information",level:2}],p={toc:u};function m(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Linux-u2f.png",src:a(7572).Z,width:"620",height:"403"})),(0,i.kt)("p",null,"This method will work with ANY security keys that support the U2F standard"),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A Security key supporting the U2F Standard"),(0,i.kt)("li",{parentName:"ul"},"Linux"),(0,i.kt)("li",{parentName:"ul"},"root access to the System you are gonna configure 2FA for")),(0,i.kt)("h2",{id:"installation-the-pam-u2f"},"Installation the pam-u2f"),(0,i.kt)("h3",{id:"arch-linux"},"Arch Linux"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pacman -Sy --needed pam-u2f\n")),(0,i.kt)("h3",{id:"debianubuntu"},"Debian/Ubuntu"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update && sudo apt install libpam-u2f\n")),(0,i.kt)("h3",{id:"source-code"},"Source code"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Yubico/pam-u2f"},"Github")),(0,i.kt)("h2",{id:"configure-security-keys"},"Configure Security keys"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"pam-u2f")," package provides a handy tool to configure Security Keys for our users called ",(0,i.kt)("inlineCode",{parentName:"p"},"pamu2fcfg")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="pamu2fcfg --help"',title:'"pamu2fcfg','--help"':!0},"Usage: pamu2fcfg [OPTION]...\nPerform a FIDO2/U2F registration operation and print a configuration line that\ncan be used with the pam_u2f module.\n\n  -h, --help               Print help and exit\n      --version            Print version and exit\n  -o, --origin=STRING      Relying party ID to use during registration,\n                             defaults to pam://hostname\n  -i, --appid=STRING       Relying party name to use during registration,\n                             defaults to the value of origin\n  -t, --type=STRING        COSE type to use during registration (ES256, EDDSA,\n                             or RS256), defaults to ES256\n  -r, --resident           Generate a resident (discoverable) credential\n  -P, --no-user-presence   Allow the credential to be used without ensuring the\n                             user's presence\n  -N, --pin-verification   Require PIN verification during authentication\n  -V, --user-verification  Require user verification during authentication\n  -d, --debug              Print debug information\n  -v, --verbose            Print information about chosen origin and appid\n  -u, --username=STRING    The name of the user registering the device,\n                             defaults to the current user name\n  -n, --nouser             Print only registration information (key handle,\n                             public key, and options), useful for appending\n\nReport bugs at <https://github.com/Yubico/pam-u2f/issues>.\n")),(0,i.kt)("h3",{id:"individual-authorization-mapping-by-user"},"Individual Authorization Mapping by User"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create folder:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p ~/.config/Yubico\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Make user keys:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pamu2fcfg > ~/.config/Yubico/u2f_keys`\n")),(0,i.kt)("p",{parentName:"li"},"2.1 Add Additional keys using"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pamu2fcfg >> ~/.config/Yubico/u2f_keys\n")))),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"pamu2fcfg example output:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="~/.config/Yubico/u2f_keys"',title:'"~/.config/Yubico/u2f_keys"'},"username:1pQTIDIGWLfyRhYjiFpJeSlSxN4fqdY0ucl59VxQdS0qV9QxDgb5HGL1Hd18o1gQ1wr9B3BP60tk4735JrIE7A==,KPMgCkrhND9yMKaImqwgywBVJlIHc8rDUVbMirXCG70X+bzld/a6HWOjaSlzUXinVp3yfofx96wgmSWkGX6poQ==,es256,+presence\n")),(0,i.kt)("h3",{id:"central-authorization-mapping"},"Central Authorization Mapping"),(0,i.kt)("p",null,"Create a file e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/u2f_mappings"),". The file must contain a user name, and the information obtained during the registration procedure."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pamu2fcfg -u username1 >> /etc/u2f_mappings\n")),(0,i.kt)("h2",{id:"activate-the-pam_u2fso-module-in-pam"},"Activate the pam_u2f.so module in PAM"),(0,i.kt)("p",null,"Configure pam-u2f as a ",(0,i.kt)("inlineCode",{parentName:"p"},"required")," module after your primary authentication module(s) for use as a second factor. Make sure that the primary authentication method is not ",(0,i.kt)("inlineCode",{parentName:"p"},"sufficient")," or uses other control values that may preempt execution of pam-u2f."),(0,i.kt)("h3",{id:"dealing-with-sddm"},"Dealing with SDDM"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For correctly work SDDM with U2F, need to change ",(0,i.kt)("inlineCode",{parentName:"p"},"system-login")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"system-local-login")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/pam.d/sddm")," Failing to do this will result in the KDE lock screen, and terminal access requiring U2F, but the initial login via SDDM bypassing U2F, which defeats the purpose of having two factor authentication.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the following line to config file (change ",(0,i.kt)("inlineCode",{parentName:"p"},"username"),")"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"auth            required        pam_u2f.so authfile=/home/<username>/.config/Yubico/u2f_keys")))),(0,i.kt)("p",null,"sddm config ",(0,i.kt)("strong",{parentName:"p"},"before")," adding U2F:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="/etc/pam.d/sddm"',title:'"/etc/pam.d/sddm"'},"#%PAM-1.0\n\nauth           include         system-login\n-auth           optional        pam_gnome_keyring.so\n-auth   optional  pam_kwallet5.so\n\naccount         include         system-login\n\npassword        include         system-login\n-password       optional        pam_gnome_keyring.so use_authtok\n\nsession         optional        pam_keyinit.so force revoke\nsession         include         system-login\n-session                optional        pam_gnome_keyring.so auto_start\n-session  optional  pam_kwallet5.so auto_start\n")),(0,i.kt)("p",null,"sddm config ",(0,i.kt)("strong",{parentName:"p"},"after")," adding U2F:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="/etc/pam.d/sddm"',title:'"/etc/pam.d/sddm"'},"#%PAM-1.0\n\n// highlight-next-line\nauth            include         system-local-login\n-auth           optional        pam_gnome_keyring.so\n-auth   optional  pam_kwallet5.so\n// highlight-next-line\nauth            required        pam_u2f.so authfile=/home/<username>/.config/Yubico/u2f_keys\n\naccount         include         system-login\n\npassword        include         system-login\n-password       optional        pam_gnome_keyring.so use_authtok\n\nsession         optional        pam_keyinit.so force revoke\nsession         include         system-login\n-session                optional        pam_gnome_keyring.so auto_start\n-session  optional  pam_kwallet5.so auto_start\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Add the same version to the top of ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/pam.d/kde")," to protect the KDE Plasma lock screen."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"auth            required        pam_u2f.so authfile=/home/<username>/.config/Yubico/u2f_keys"))),(0,i.kt)("admonition",{title:"PAM Configuration (Reference)",type:"info"},(0,i.kt)("details",null,(0,i.kt)("summary",null,"PAM Configuration File Syntax"),(0,i.kt)("p",{parentName:"admonition"},"The entries in the configuration file are in the format:"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"service-name module-type control-flag module-path module-options"))),(0,i.kt)("hr",{parentName:"admonition"}),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"service-name")," - Name of the service, for example, ",(0,i.kt)("inlineCode",{parentName:"p"},"ftp"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"login"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"passwd"),". An application can use different service names for the services that the application provides. For example, the Solaris secure shell daemon uses these service names: ",(0,i.kt)("inlineCode",{parentName:"p"},"sshd-none"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sshd-password"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sshd-kbdint"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sshd-pubkey"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"sshd-hostbased"),". The service-name other is a predefined name that is used as a wildcard service-name. If a particular service-name is not found in the configuration file, the configuration for other is used."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"module-type")," - The type of service, that is, auth, account, session, or password."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"control-flag")," - Indicates the role of the module in determining the integrated success or failure value for the service. Valid control flags are binding, include, optional, required, requisite, and sufficient. See below how PAM Stacking Works for information on the use of these flags."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"module-path")," - The path to the library object that implements the service. If the pathname is not absolute, the pathname is assumed to be relative to ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/lib/security/$ISA/"),". Use the architecture-dependent macro $ISA to cause ",(0,i.kt)("inlineCode",{parentName:"p"},"libpam")," to look in the directory for the particular architecture of the application."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"module-options")," - Options that are passed to the service modules. A module's man page describes the options that are accepted by that module. Typical module options include ",(0,i.kt)("inlineCode",{parentName:"p"},"nowarn")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"debug"),".")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"How PAM Stacking Works"),(0,i.kt)("p",{parentName:"admonition"},"The control flag indicates the role that a PAM module plays in determining access to the service. The control flags and their effects are:"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Binding")," \u2013 Success in meeting a binding module's requirements returns success immediately to the application if no previous required modules have failed. If these conditions are met, then no further execution of modules occurs. Failure causes a required failure to be recorded and the processing of modules to be continued."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Include")," \u2013 Adds lines from a separate PAM configuration file to be used at this point in the PAM stack. This flag does not control success or failure behaviors. When a new file is read, the PAM include stack is incremented. When the stack check in the new file finishes, the include stack value is decremented. When the end of a file is reached and the PAM include stack is 0, then the stack processing ends. The maximum number for the PAM include stack is 32."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Optional")," \u2013 Success in meeting an optional module's requirements is not necessary for using the service. Failure causes an optional failure to be recorded."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Required")," \u2013 Success in meeting a required module's requirements is necessary for using the service. Failure results in an error return after the remaining modules for this service have been executed. Final success for the service is returned only if no binding or required modules have reported failures."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Requisite")," \u2013 Success in meeting a requisite module's requirements is necessary for using the service. Failure results in an immediate error return with no further execution of modules. All requisite modules for a service must return success for the function to be able to return success to the application."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Sufficient")," \u2013 If no previous required failures have occurred, success in a sufficient module returns success to the application immediately with no further execution of modules. Failure causes an optional failure to be recorded."),(0,i.kt)("p",{parentName:"admonition"},"The following two diagrams shows how access is determined in the integration process. The first diagram indicates how success or failure is recorded for each type of control flag. The second diagram shows how the integrated value is determined."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Effect of Control Flags"))),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("img",{alt:"img",src:a(2422).Z,width:"555",height:"630"})),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"How Integrated Value Is Determined"))),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("img",{alt:"img",src:a(5056).Z,width:"518",height:"484"})))),(0,i.kt)("h3",{id:"passwordless-sudo-with-u2f"},"Passwordless sudo with U2F"),(0,i.kt)("p",null,"You can use U2F key for Passwordless sudo i.e only the U2f key would be needed to run sudo commands"),(0,i.kt)("p",null,"We can achieve this by editing the ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/pam.d/sudo")," file"),(0,i.kt)("p",null,"Add the following line to the TOP of the sudo file"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"auth            sufficient        pam_u2f.so authfile=/home/<username>/.config/Yubico/u2f_keys cue [cue_prompt=<Prompt we want to show to our users>]")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="/etc/pam.d/sudo"',title:'"/etc/pam.d/sudo"'},"#%PAM-1.0\n// highlight-next-line\nauth            sufficient        pam_u2f.so authfile=/home/<username>/.config/Yubico/u2f_keys cue [cue_prompt=Please Confirm Your Identity.]\nauth            include         system-auth\naccount         include         system-auth\nsession         include         system-auth\n\n")),(0,i.kt)("h2",{id:"ssh-credentials"},"SSH Credentials"),(0,i.kt)("p",null,"First need to make sure the client has ",(0,i.kt)("a",{parentName:"p",href:"https://www.openssh.com/txt/release-8.2"},"OpenSSH 8.2")," or higher installed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ ssh -V\nOpenSSH_9.1p1, OpenSSL 3.0.7 1 Nov 2022\n")),(0,i.kt)("p",null,"To generate a new SSH key pair, which can be either ",(0,i.kt)("inlineCode",{parentName:"p"},"ecdsa-sk")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ed25519-sk")," key pair. The ",(0,i.kt)("inlineCode",{parentName:"p"},"-sk")," extension stands for ",(0,i.kt)("strong",{parentName:"p"},"security key"),". Please note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"ed25519-sk")," key pair is only supported by new YubiKeys with firmware 5.2.3 or higher that supports FIDO2. This means that YubiKeys with firmware below 5.2.3 are only compatible with ecdsa-sk key pairs. If possible, generate an ",(0,i.kt)("inlineCode",{parentName:"p"},"ed25519-sk")," SSH key pair for ",(0,i.kt)("a",{parentName:"p",href:"https://www.cryptsus.com/blog/how-to-secure-your-ssh-server-with-public-key-elliptic-curve-ed25519-crypto.html"},"this reason"),"."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can check the YubiKey firmware* version with the following command."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ lsusb -v 2>/dev/null | grep -A2 Yubico | grep \"bcdDevice\" | awk '{print $2}'\n5.27\n")),(0,i.kt)("p",{parentName:"admonition"},"Or we can use  ",(0,i.kt)("a",{parentName:"p",href:"#additional-information"},"YubiKey Manager")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("img",{alt:"YubiKey Manager AppImage",src:a(1167).Z,width:"450",height:"337"})),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"*","Yubico does not allow its firmware to be modified to minimize the physical attack surface.")))),(0,i.kt)("p",null,"It is then possible to generate a credential file with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'ssh-keygen -t ed25519-sk -C "$(hostname)-Yubikey"\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"ssh-keygen",src:a(495).Z,width:"600",height:"451"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"ssh-keys",src:a(3216).Z,width:"600",height:"345"})),(0,i.kt)("p",null,"Add your new SSH key-pair on remote host"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ssh-copy-id -i ~/.ssh/id_ed25519_sk.pub user@192.168.1.1\n")),(0,i.kt)("p",null,"Use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ssh -i ~/.ssh/id_ed25519_sk user@192.168.1.1\n")),(0,i.kt)("h2",{id:"additional-information"},"Additional information"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developers.yubico.com/yubikey-manager-qt/Releases/yubikey-manager-qt-latest-linux.AppImage"},"YubiKey Manager AppImage")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://solokeys.com/"},"SoloKeys (open-source hardware and firmware) as an alternative to YubiKeys (closed source)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Yubico/pam-u2f"},"pam-u2f")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://wiki.archlinux.org/title/PAM#PAM_base-stack"},"PAM base-stack in Arch Linux")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://wiki.archlinux.org/title/YubiKey#Linux_user_authentication_with_PAM"},"Linux user authentication with PAM")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Yubico/pam-u2f#module-arguments"},"More information for module arguments")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/agherzan/yubikey-full-disk-encryption"},"YubiKey Full Disk Encryption")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://support.yubico.com/hc/en-us/articles/360016649039-Installing-Yubico-Software-on-Linux"},"Installing Yubico Software on Linux")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://support.yubico.com/hc/en-us/articles/360013708900-Using-Your-U2F-YubiKey-with-Linux"},"Using Your U2F YubiKey with Linux")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://support.yubico.com/"},"Yubico Support")))))}m.isMDXComponent=!0},7572:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Linux-u2f-d191082d2c598f7ab0e515a72058ea97.png"},2422:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/pam.run_stack1-1571d98e7a04d8bb2bac3df5a51381bf.png"},5056:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/pam.run_stack2-ac28c1fe548d666dbe0c30a1ed33a47f.png"},495:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/ssh-keygen-ed25519-sk-8ef8f44739ba1a0694cfd35802201e32.png"},3216:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/ssh-keys-e235f14425160718200a0d6021f56c6e.png"},1167:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/yubikey-appimage-dc7b8786ae923b8f0a93289083ac5a46.png"}}]);
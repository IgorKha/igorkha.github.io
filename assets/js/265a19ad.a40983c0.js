"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2263],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),d=i,m=u["".concat(c,".").concat(d)]||u[d]||f[d]||o;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6175:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),i=(r(7294),r(3905));const o={id:"Intro",title:"Intro",description:"Realistic Traffic Generator"},a=void 0,l={unversionedId:"networks/Trex/Intro",id:"networks/Trex/Intro",title:"Intro",description:"Realistic Traffic Generator",source:"@site/docs/networks/Trex/01-main.md",sourceDirName:"networks/Trex",slug:"/networks/Trex/Intro",permalink:"/docs/networks/Trex/Intro",draft:!1,editUrl:"https://github.com/IgorKha/igorkha.github.io/tree/main/docs/networks/Trex/01-main.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"Intro",title:"Intro",description:"Realistic Traffic Generator"},sidebar:"tutorialSidebar",previous:{title:"Trex \ud83e\udd96",permalink:"/docs/category/trex-"},next:{title:"Installation",permalink:"/docs/networks/Trex/installation"}},c={},s=[{value:"Realistic Traffic Generator",id:"realistic-traffic-generator",level:2}],p={toc:s},u="wrapper";function f(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"realistic-traffic-generator"},"Realistic Traffic Generator"),(0,i.kt)("p",null,"TRex is an open source, low cost, stateful and stateless traffic generator fuelled by DPDK. It generates L3-7 traffic and provides in one tool capabilities provided by commercial tools."),(0,i.kt)("p",null,"TRex Stateless functionality includes support for multiple streams, the ability to change any packet field and provides per stream/group statistics, latency and jitter."),(0,i.kt)("p",null,"Advanced Stateful functionality includes support for emulating L7 traffic with fully-featured scalable TCP/UDP support."),(0,i.kt)("p",null,"TRex Emulation functionality includes client side protocols i.e ARP, IPv6, ND, MLD, IGMP, ICMP, DOT1X, DCHPv4, DHCPv6, DNS in order to simulate a scale of clients and servers."),(0,i.kt)("p",null,"TRex can scale up to 200Gb/sec with one server."),(0,i.kt)("admonition",{title:"Links",type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://trex-tgn.cisco.com"},"Official website")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://trex-tgn.cisco.com/trex/release"},"Releases")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/cisco-system-traffic-generator"},"trex repo [GitHub]")))))}f.isMDXComponent=!0}}]);